USE film_rental;
SELECT * FROM ACTOR;
SELECT * FROM ADDRESS;
SELECT * FROM CATEGORY;
SELECT * FROM CITY;
SELECT * FROM COUNTRY;
SELECT * FROM CUSTOMER;

SELECT * FROM FILM_ACTOR;
SELECT * FROM FILM_CATEGORY;
SELECT * FROM INVENTORY;
SELECT * FROM LANGUAGE;
SELECT * FROM PAYMENT;
SELECT * FROM FILM;
SELECT * FROM RENTAL;
SELECT * FROM STAFF;
SELECT * FROM STORE; 
#1.	What is the total revenue generated from all rentals in the database?
SELECT SUM(AMOUNT) AS total_revenue FROM PAYMENT;

#2.	How many rentals were made in each month_name? (2 Marks)
SELECT DISTINCT COUNT(RENTAL_ID) RENTALS,MONTHNAME(PAYMENT_DATE) MONTHS FROM PAYMENT GROUP BY MONTHS;

#3.	What is the rental rate of the film with the longest title in the database? (2 Marks)
SELECT RENTAL_RATE,TITLE FROM FILM WHERE LENGTH(TITLE)=(
SELECT MAX(LENGTH(TITLE)) FROM FILM);

#4.	What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? (2 Marks)
SELECT * FROM FILM;
SELECT AVG(RENTAL_RATE) FROM FILM WHERE  DATEDIFF(LAST_UPDATE,"2005-05-05 22:04:30")<=30; 

#5.	What is the most popular category of films in terms of the number of rentals? (3 Marks)
SELECT C.NAME,COUNT(*) COUN FROM FILM F JOIN FILM_CATEGORY FC  ON
F.FILM_ID = FC.FILM_ID
JOIN CATEGORY C ON FC.CATEGORY_ID = C.CATEGORY_ID
JOIN INVENTORY I ON F.FILM_ID = I.FILM_ID
JOIN RENTAL R ON I.INVENTORY_ID = R.INVENTORY_ID
GROUP BY C.CATEGORY_ID ORDER BY COUN DESC
LIMIT 1;
 
#6.	Find the longest movie duration from the list of films that have not been rented by any customer. (3 Marks)
SELECT a.title, MAX(a.length) longest_duration FROM film a
LEFT JOIN inventory b ON a.film_id = b.film_id
LEFT JOIN rental c ON b.inventory_id = c.inventory_id WHERE c.rental_id IS NULL
GROUP BY a.title ORDER BY longest_duration DESC LIMIT 1;

#7.	What is the average rental rate for films, broken down by category? (3 Marks)
SELECT F.TITLE,AVG(RENTAL_RATE) AVG_RENTAL_RATE,C.NAME  FROM FILM F JOIN FILM_CATEGORY FC  ON
F.FILM_ID = FC.FILM_ID
JOIN CATEGORY C ON FC.CATEGORY_ID = C.CATEGORY_ID GROUP BY C.NAME ORDER BY AVG_RENTAL_RATE DESC;

#8.	What is the total revenue generated from rentals for each actor in the database? (3 Marks)
SELECT A.ACTOR_ID,A.FIRST_NAME,A.LAST_NAME,SUM(RENTAL_RATE) FROM ACTOR A JOIN FILM_ACTOR FA ON 
A.ACTOR_ID = FA.ACTOR_ID
JOIN FILM F ON FA.FILM_ID = F.FILM_ID
GROUP BY FA.ACTOR_ID,A.FIRST_NAME,A.LAST_NAME;  

#9.	Show all the actresses who worked in a film having a "Wrestler" in the description. (3 Marks)
SELECT DISTINCT A.ACTOR_ID,A.FIRST_NAME,A.LAST_NAME FROM ACTOR A JOIN FILM_ACTOR FA ON 
A.ACTOR_ID = FA.ACTOR_ID
JOIN FILM F ON FA.FILM_ID = F.FILM_ID
WHERE F.DESCRIPTION LIKE '%Wrestler%' ORDER BY A.FIRST_NAME,A.LAST_NAME;

#10.Which customers have rented the same film more than once? (3 Marks)
SELECT C.CUSTOMER_ID,C.FIRST_NAME,C.LAST_NAME,F.FILM_ID,F.TITLE,COUNT(*) COUNTS FROM CUSTOMER C JOIN RENTAL R 
ON C.CUSTOMER_ID = R.CUSTOMER_ID
JOIN INVENTORY I ON I.INVENTORY_ID = R.INVENTORY_ID 
JOIN FILM F ON F.FILM_ID = I.FILM_ID
GROUP BY C.CUSTOMER_ID,C.FIRST_NAME,C.LAST_NAME,F.FILM_ID,F.TITLE
HAVING COUNTS>1 ORDER BY COUNTS DESC;  

#11.How many films in the comedy category have a rental rate higher than the average rental rate? (3 Marks)
SELECT COUNT(*) COUNTS FROM 
(SELECT F.FILM_ID FROM FILM_CATEGORY FC JOIN FILM F ON FC.FILM_ID = F.FILM_ID
JOIN CATEGORY C ON FC.CATEGORY_ID = C.CATEGORY_ID WHERE C.NAME="COMEDY" 
GROUP BY F.FILM_ID, F.TITLE, F.RENTAL_RATE,FC.CATEGORY_ID
HAVING AVg(RENTAL_RATE) >(SELECT AVG(RENTAL_RATE) FROM FILM)) X; 

#12.Which films have been rented the most by customers living in each city? (3 Marks)
WITH ranked_films AS (SELECT c.customer_id,ci.city,f.title,COUNT(r.rental_id) AS rental_count,
ROW_NUMBER() OVER (PARTITION BY ci.city ORDER BY COUNT(r.rental_id) DESC) AS ranking
FROM customer c JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id 
JOIN address a ON c.address_id = a.address_id 
JOIN city ci ON a.city_id = ci.city_id GROUP BY c.customer_id, ci.city, f.title
)SELECT customer_id,city,title,rental_count FROM ranked_films WHERE ranking = 1;
 
#13.	What is the total amount spent by customers whose rental payments exceed $200? (3 Marks)
SELECT C.FIRST_NAME,C.LAST_NAME,C.CUSTOMER_ID,SUM(AMOUNT) RENTAL_AMOUNT FROM PAYMENT P JOIN CUSTOMER C ON 
P.CUSTOMER_ID = C.CUSTOMER_ID GROUP BY C.CUSTOMER_ID 
HAVING RENTAL_AMOUNT>200;

#14.Display the fields which are having foreign key constraints related to the "rental" table. [Hint: using Information_schema] (2 Marks)
SELECT COLUMN_NAME,TABLE_SCHEMA,CONSTRAINT_NAME,REFERENCED_TABLE_SCHEMA,REFERENCED_TABLE_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE TABLE_NAME = 'rental'AND REFERENCED_TABLE_NAME IS NOT NULL; 

#15.Create a View for the total revenue generated by each staff member, broken down by store city with the country name. (4 Marks)
CREATE VIEW StaffRevenueByCity AS
SELECT s.staff_id,s.first_name,s.last_name,c.city,co.country,SUM(p.amount) AS total_revenue
FROM staff s JOIN store st ON s.store_id = st.store_id
JOIN address a ON st.address_id = a.address_id
JOIN city c ON a.city_id = c.city_id
JOIN country co ON c.country_id = co.country_id
JOIN payment p ON s.staff_id = p.staff_id
GROUP BY s.staff_id, c.city, co.country;

#16.Create a view based on rental information consisting of visiting_day, customer_name, the title of the film,  no_of_rental_days,
# the amount paid by the customer along with the percentage of customer spending. (4 Marks)
CREATE VIEW rental_view AS
SELECT DATE_FORMAT(r.rental_date, '%Y-%m-%d') AS visiting_day,CONCAT(c.first_name, ' ', c.last_name) AS customer_name,f.title AS film_title,DATEDIFF(r.return_date, r.rental_date) AS no_of_rental_days,p.amount AS amount_paid,(p.amount / (SELECT SUM(amount) FROM payment WHERE customer_id = r.customer_id)) * 100 AS percentage_spending
FROM rental r JOIN customer c ON r.customer_id = c.customer_id
JOIN payment p ON r.rental_id = p.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id;

#17.Display the customers who paid 50% of their total rental costs within one day. (5 Marks)
SELECT c.customer_id,CONCAT(c.first_name, ' ', c.last_name) AS customer_name,r.rental_id,r.rental_date,r.return_date,p.amount AS total_payment,r.return_date - r.rental_date AS rental_duration,p.amount / (DATEDIFF(r.return_date, r.rental_date) + 1) AS daily_payment
FROM rental r JOIN customer c ON r.customer_id = c.customer_id
JOIN payment p ON r.rental_id = p.rental_id
WHERE p.amount >= 0.5 * (SELECT SUM(p2.amount) FROM payment p2 WHERE p2.customer_id = c.customer_id)
AND DATEDIFF(r.return_date, r.rental_date) = 0;

